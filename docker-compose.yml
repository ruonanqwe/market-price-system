version: '3.8'

services:
  # 主API服务
  market-api:
    build: .
    container_name: market-price-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./backups:/app/backups
      - ./market_data.db:/app/market_data.db
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DB_PATH=/app/market_data.db
      - LOG_LEVEL=INFO
    networks:
      - market-network
    depends_on:
      - scheduler
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 定时任务服务
  scheduler:
    build: .
    container_name: market-scheduler
    restart: unless-stopped
    command: ["python", "scheduler_service.py"]
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./backups:/app/backups
      - ./market_data.db:/app/market_data.db
      - ./scheduler_config.json:/app/scheduler_config.json
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DB_PATH=/app/market_data.db
      - LOG_LEVEL=INFO
    networks:
      - market-network
    healthcheck:
      test: ["CMD", "python", "-c", "import json; print(json.load(open('health_status.json'))['status'])"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: market-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - market-api
    networks:
      - market-network

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: market-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - market-network

  # Grafana仪表板（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: market-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - market-network

  # Portainer Docker管理界面
  portainer:
    image: portainer/portainer-ce:latest
    container_name: market-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    environment:
      - PORTAINER_ADMIN_PASSWORD_FILE=/tmp/portainer_password
    command: --admin-password-file /tmp/portainer_password
    networks:
      - market-network

  # 系统监控可视化面板
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: market-dashboard
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./dashboard:/usr/share/nginx/html
      - ./nginx-dashboard.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - market-api
      - portainer
    networks:
      - market-network

networks:
  market-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  portainer_data:

#!/bin/bash

# ÂÜú‰∫ßÂìÅÂ∏ÇÂú∫‰ª∑Ê†ºÁõëÊéßÁ≥ªÁªüÊèí‰ª∂ÊâìÂåÖËÑöÊú¨
# Â∞ÜÊâÄÊúâÊñá‰ª∂ÊâìÂåÖÊàêÂèØÈÉ®ÁΩ≤ÁöÑÊèí‰ª∂ÂåÖ

set -e

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# ÈÖçÁΩÆÂèòÈáè
PLUGIN_NAME="market-price-system"
PLUGIN_VERSION="1.0.0"
PACKAGE_NAME="${PLUGIN_NAME}-v${PLUGIN_VERSION}"
BUILD_DIR="build"
DIST_DIR="dist"

# Êó•ÂøóÂáΩÊï∞
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

log_success() {
    echo -e "${PURPLE}[SUCCESS]${NC} $1"
}

# ÊòæÁ§∫ÊâìÂåÖ‰ø°ÊÅØ
show_package_info() {
    clear
    echo -e "${PURPLE}"
    echo "=================================================================="
    echo "           ÂÜú‰∫ßÂìÅÂ∏ÇÂú∫‰ª∑Ê†ºÁõëÊéßÁ≥ªÁªüÊèí‰ª∂ÊâìÂåÖÂ∑•ÂÖ∑"
    echo "                    v$PLUGIN_VERSION"
    echo "=================================================================="
    echo -e "${NC}"
    echo "üì¶ ÊâìÂåÖÂÜÖÂÆπ:"
    echo "   ‚Ä¢ PythonÂ∫îÁî®Á®ãÂ∫èÊñá‰ª∂"
    echo "   ‚Ä¢ DockerÈÉ®ÁΩ≤ÈÖçÁΩÆ"
    echo "   ‚Ä¢ Á≥ªÁªüÊúçÂä°ÈÖçÁΩÆ"
    echo "   ‚Ä¢ Êï∞ÊçÆÂ∫ìÁÆ°ÁêÜËÑöÊú¨"
    echo "   ‚Ä¢ ÁõëÊéßÂíåÊó•ÂøóÈÖçÁΩÆ"
    echo "   ‚Ä¢ ‰∏ÄÈîÆÈÉ®ÁΩ≤ËÑöÊú¨"
    echo "   ‚Ä¢ ÂÆåÊï¥ÊñáÊ°£ÂíåÁ§∫‰æã"
    echo
    echo "üéØ ÁõÆÊ†áÁéØÂ¢É:"
    echo "   ‚Ä¢ Ubuntu 22.04 LTS"
    echo "   ‚Ä¢ Python 3.11"
    echo "   ‚Ä¢ 8Ê†∏CPU + 32GBÂÜÖÂ≠ò"
    echo "   ‚Ä¢ ModelScope Library"
    echo
}

# Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩï
clean_build_dir() {
    log_step "Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩï..."
    
    if [[ -d "$BUILD_DIR" ]]; then
        rm -rf "$BUILD_DIR"
    fi
    
    if [[ -d "$DIST_DIR" ]]; then
        rm -rf "$DIST_DIR"
    fi
    
    mkdir -p "$BUILD_DIR/$PACKAGE_NAME"
    mkdir -p "$DIST_DIR"
    
    log_info "ÊûÑÂª∫ÁõÆÂΩïÂ∑≤Ê∏ÖÁêÜ"
}

# Â§çÂà∂Ê†∏ÂøÉÊñá‰ª∂
copy_core_files() {
    log_step "Â§çÂà∂Ê†∏ÂøÉÂ∫îÁî®Êñá‰ª∂..."
    
    local target_dir="$BUILD_DIR/$PACKAGE_NAME"
    
    # PythonÂ∫îÁî®Êñá‰ª∂
    cp market_crawler.py "$target_dir/"
    cp api_server.py "$target_dir/"
    cp database_manager.py "$target_dir/"
    cp location_service.py "$target_dir/"
    cp scheduler_service.py "$target_dir/"
    cp requirements.txt "$target_dir/"
    
    log_info "Ê†∏ÂøÉÊñá‰ª∂Â§çÂà∂ÂÆåÊàê"
}

# Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
copy_config_files() {
    log_step "Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂..."
    
    local target_dir="$BUILD_DIR/$PACKAGE_NAME"
    
    # ÂàõÂª∫ÈÖçÁΩÆÁõÆÂΩï
    mkdir -p "$target_dir/config"
    
    # ÈÖçÁΩÆÊñá‰ª∂
    cp plugin_config.yaml "$target_dir/config/"
    cp .env.example "$target_dir/"
    cp plugin_info.json "$target_dir/"
    
    # DockerÈÖçÁΩÆ
    cp Dockerfile "$target_dir/"
    cp docker-compose.yml "$target_dir/"
    cp nginx.conf "$target_dir/"
    
    log_info "ÈÖçÁΩÆÊñá‰ª∂Â§çÂà∂ÂÆåÊàê"
}

# Â§çÂà∂ÈÉ®ÁΩ≤ËÑöÊú¨
copy_deployment_scripts() {
    log_step "Â§çÂà∂ÈÉ®ÁΩ≤ËÑöÊú¨..."
    
    local target_dir="$BUILD_DIR/$PACKAGE_NAME"
    
    # ÈÉ®ÁΩ≤ËÑöÊú¨
    cp deploy.sh "$target_dir/"
    cp install.sh "$target_dir/"
    cp docker-install.sh "$target_dir/"
    
    # ËÆæÁΩÆÊâßË°åÊùÉÈôê
    chmod +x "$target_dir"/*.sh
    
    log_info "ÈÉ®ÁΩ≤ËÑöÊú¨Â§çÂà∂ÂÆåÊàê"
}

# Â§çÂà∂ÊñáÊ°£Êñá‰ª∂
copy_documentation() {
    log_step "Â§çÂà∂ÊñáÊ°£Êñá‰ª∂..."
    
    local target_dir="$BUILD_DIR/$PACKAGE_NAME"
    
    # ÂàõÂª∫ÊñáÊ°£ÁõÆÂΩï
    mkdir -p "$target_dir/docs"
    
    # ‰∏ªË¶ÅÊñáÊ°£
    cp README.md "$target_dir/"
    
    # ÂàõÂª∫È¢ùÂ§ñÊñáÊ°£
    create_installation_guide "$target_dir"
    create_api_documentation "$target_dir"
    create_troubleshooting_guide "$target_dir"
    
    log_info "ÊñáÊ°£Êñá‰ª∂Â§çÂà∂ÂÆåÊàê"
}

# ÂàõÂª∫ÂÆâË£ÖÊåáÂçó
create_installation_guide() {
    local target_dir="$1"
    
    cat > "$target_dir/docs/INSTALLATION.md" << 'EOF'
# ÂÆâË£ÖÊåáÂçó

## Âø´ÈÄüÂÆâË£Ö

### ÊñπÂºè‰∏ÄÔºö‰∏ÄÈîÆÈÉ®ÁΩ≤ÔºàÊé®ËçêÔºâ
```bash
chmod +x deploy.sh
./deploy.sh
```

### ÊñπÂºè‰∫åÔºöDockerÈÉ®ÁΩ≤
```bash
chmod +x docker-install.sh
./docker-install.sh
```

### ÊñπÂºè‰∏âÔºöÊú¨Âú∞ÈÉ®ÁΩ≤
```bash
chmod +x install.sh
./install.sh
```

## Á≥ªÁªüË¶ÅÊ±Ç

- Ubuntu 22.04 LTS
- Python 3.11
- 8Ê†∏CPU + 32GBÂÜÖÂ≠ò
- 10GB+ Â≠òÂÇ®Á©∫Èó¥
- ‰∫íËÅîÁΩëËøûÊé•

## Á´ØÂè£ËØ¥Êòé

- 8000: APIÊúçÂä°Á´ØÂè£
- 80: Nginx‰ª£ÁêÜÁ´ØÂè£
- 3000: GrafanaÁõëÊéßÈù¢Êùø
- 9090: PrometheusÁõëÊéß

## ÈÖçÁΩÆÊñá‰ª∂

- `config/plugin_config.yaml`: ‰∏ªÈÖçÁΩÆÊñá‰ª∂
- `.env`: ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ
- `scheduler_config.json`: Ë∞ÉÂ∫¶Âô®ÈÖçÁΩÆ

## ÊúçÂä°ÁÆ°ÁêÜ

### DockerÈÉ®ÁΩ≤
```bash
# ÂêØÂä®ÊúçÂä°
docker-compose up -d

# ÂÅúÊ≠¢ÊúçÂä°
docker-compose down

# Êü•ÁúãÁä∂ÊÄÅ
docker-compose ps

# Êü•ÁúãÊó•Âøó
docker-compose logs -f
```

### Êú¨Âú∞ÈÉ®ÁΩ≤
```bash
# ÂêØÂä®ÊúçÂä°
sudo systemctl start market-price-api.service

# ÂÅúÊ≠¢ÊúçÂä°
sudo systemctl stop market-price-api.service

# Êü•ÁúãÁä∂ÊÄÅ
sudo systemctl status market-price-api.service

# Êü•ÁúãÊó•Âøó
sudo journalctl -u market-price-api.service -f
```
EOF
}

# ÂàõÂª∫APIÊñáÊ°£
create_api_documentation() {
    local target_dir="$1"
    
    cat > "$target_dir/docs/API.md" << 'EOF'
# APIÊñáÊ°£

## Âü∫Á°Ä‰ø°ÊÅØ

- Âü∫Á°ÄURL: `http://localhost:8000`
- ÂÜÖÂÆπÁ±ªÂûã: `application/json`
- ËÆ§ËØÅÊñπÂºè: Êó†ÈúÄËÆ§ËØÅÔºàÂèØÈÖçÁΩÆAPIÂØÜÈí•Ôºâ

## Êé•Âè£ÂàóË°®

### 1. ÂÅ•Â∫∑Ê£ÄÊü•
```http
GET /api/health
```

**ÂìçÂ∫îÁ§∫‰æã:**
```json
{
    "status": "healthy",
    "timestamp": "2024-12-05T10:00:00Z",
    "crawler_running": true
}
```

### 2. Ëé∑ÂèñÁúÅ‰ªΩÂàóË°®
```http
GET /api/provinces
```

### 3. Êü•ËØ¢‰ª∑Ê†ºÊï∞ÊçÆ
```http
POST /api/prices/query
Content-Type: application/json

{
    "province": "Âπø‰∏úÁúÅ",
    "variety_name": "ÁôΩËêùÂçú",
    "start_date": "2024-01-01",
    "end_date": "2024-01-31",
    "limit": 100
}
```

### 4. Âú∞ÁêÜ‰ΩçÁΩÆÊü•ËØ¢
```http
POST /api/prices/nearby
Content-Type: application/json

{
    "latitude": 23.1291,
    "longitude": 113.2644,
    "radius": 50
}
```

## ÈîôËØØÁ†ÅËØ¥Êòé

- 200: ÊàêÂäü
- 400: ËØ∑Ê±ÇÂèÇÊï∞ÈîôËØØ
- 404: ËµÑÊ∫ê‰∏çÂ≠òÂú®
- 500: ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ

## ‰ΩøÁî®Á§∫‰æã

### PythonÁ§∫‰æã
```python
import requests

# Êü•ËØ¢‰ª∑Ê†ºÊï∞ÊçÆ
response = requests.post('http://localhost:8000/api/prices/query', 
    json={'province': 'Âπø‰∏úÁúÅ', 'variety_name': 'ÁôΩËêùÂçú'})
data = response.json()
print(f"ÊâæÂà∞ {data['count']} Êù°ËÆ∞ÂΩï")
```

### JavaScriptÁ§∫‰æã
```javascript
// Ëé∑ÂèñÈôÑËøë‰ª∑Ê†º
fetch('http://localhost:8000/api/prices/nearby', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({
        latitude: 23.1291,
        longitude: 113.2644,
        radius: 50
    })
})
.then(response => response.json())
.then(data => console.log(data));
```
EOF
}

# ÂàõÂª∫ÊïÖÈöúÊéíÈô§ÊåáÂçó
create_troubleshooting_guide() {
    local target_dir="$1"
    
    cat > "$target_dir/docs/TROUBLESHOOTING.md" << 'EOF'
# ÊïÖÈöúÊéíÈô§ÊåáÂçó

## Â∏∏ËßÅÈóÆÈ¢ò

### 1. ÊúçÂä°ÂêØÂä®Â§±Ë¥•

**ÈóÆÈ¢ò**: ÊúçÂä°Êó†Ê≥ïÂêØÂä®
**Ëß£ÂÜ≥ÊñπÊ°à**:
```bash
# Ê£ÄÊü•Á´ØÂè£Âç†Áî®
sudo netstat -tlnp | grep :8000

# Ê£ÄÊü•Êó•Âøó
sudo journalctl -u market-price-api.service -n 50

# ÈáçÂêØÊúçÂä°
sudo systemctl restart market-price-api.service
```

### 2. Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•

**ÈóÆÈ¢ò**: Êó†Ê≥ïËøûÊé•Âà∞Êï∞ÊçÆÂ∫ì
**Ëß£ÂÜ≥ÊñπÊ°à**:
```bash
# Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊñá‰ª∂
ls -la data/market_data.db

# ÈáçÊñ∞ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
python -c "from database_manager import DatabaseManager; DatabaseManager()"
```

### 3. Áà¨Ëô´Êó†Êï∞ÊçÆ

**ÈóÆÈ¢ò**: Áà¨Ëô´ËøêË°å‰ΩÜÊ≤°ÊúâËé∑ÂèñÂà∞Êï∞ÊçÆ
**Ëß£ÂÜ≥ÊñπÊ°à**:
```bash
# Ê£ÄÊü•ÁΩëÁªúËøûÊé•
curl -I https://pfsc.agri.cn

# Ê£ÄÊü•Áà¨Ëô´Êó•Âøó
tail -f logs/crawler.log

# ÊâãÂä®ËøêË°åÁà¨Ëô´ÊµãËØï
python market_crawler.py --mode=api
```

### 4. APIÂìçÂ∫îÊÖ¢

**ÈóÆÈ¢ò**: APIÊé•Âè£ÂìçÂ∫îÊó∂Èó¥ËøáÈïø
**Ëß£ÂÜ≥ÊñπÊ°à**:
- Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÁ¥¢Âºï
- ‰ºòÂåñÊü•ËØ¢Êù°‰ª∂
- Â¢ûÂä†ÁºìÂ≠òÈÖçÁΩÆ
- Ê∏ÖÁêÜÂéÜÂè≤Êï∞ÊçÆ

### 5. ÂÜÖÂ≠òÂç†Áî®ËøáÈ´ò

**ÈóÆÈ¢ò**: Á≥ªÁªüÂÜÖÂ≠ò‰ΩøÁî®ÁéáËøáÈ´ò
**Ëß£ÂÜ≥ÊñπÊ°à**:
- Ë∞ÉÊï¥Áà¨Ëô´Âπ∂ÂèëÊï∞
- Ê∏ÖÁêÜÂéÜÂè≤Êï∞ÊçÆ
- ÈáçÂêØÊúçÂä°
- Ê£ÄÊü•ÂÜÖÂ≠òÊ≥ÑÊºè

## Êó•ÂøóÊñá‰ª∂‰ΩçÁΩÆ

- APIÊúçÂä°Êó•Âøó: `logs/api.log`
- Ë∞ÉÂ∫¶Âô®Êó•Âøó: `logs/scheduler.log`
- Áà¨Ëô´Êó•Âøó: `logs/crawler.log`
- ÈîôËØØÊó•Âøó: `logs/error.log`

## ÊÄßËÉΩ‰ºòÂåñÂª∫ËÆÆ

1. **Êï∞ÊçÆÂ∫ì‰ºòÂåñ**
   - ÂÆöÊúüÊâßË°åVACUUM
   - ÂàõÂª∫ÂêàÈÄÇÁöÑÁ¥¢Âºï
   - Ê∏ÖÁêÜËøáÊúüÊï∞ÊçÆ

2. **Á≥ªÁªü‰ºòÂåñ**
   - Ë∞ÉÊï¥Á≥ªÁªüÂèÇÊï∞
   - ‰ºòÂåñÁ£ÅÁõòI/O
   - ÁõëÊéßÁ≥ªÁªüËµÑÊ∫ê

3. **Â∫îÁî®‰ºòÂåñ**
   - ÂêØÁî®ÁºìÂ≠ò
   - ‰ºòÂåñÊü•ËØ¢ÈÄªËæë
   - ‰ΩøÁî®ËøûÊé•Ê±†

## ËÅîÁ≥ªÊîØÊåÅ

Â¶ÇÊûúÈóÆÈ¢ò‰ªçÁÑ∂Â≠òÂú®ÔºåËØ∑ËÅîÁ≥ªÊäÄÊúØÊîØÊåÅÔºö
- ÈÇÆÁÆ±: support@example.com
- Êèê‰æõÈîôËØØÊó•ÂøóÂíåÁ≥ªÁªü‰ø°ÊÅØ
EOF
}

# ÂàõÂª∫Á§∫‰æãÊñá‰ª∂
create_examples() {
    log_step "ÂàõÂª∫Á§∫‰æãÊñá‰ª∂..."
    
    local target_dir="$BUILD_DIR/$PACKAGE_NAME"
    mkdir -p "$target_dir/examples"
    
    # PythonÂÆ¢Êà∑Á´ØÁ§∫‰æã
    cat > "$target_dir/examples/python_client.py" << 'EOF'
#!/usr/bin/env python3
"""
ÂÜú‰∫ßÂìÅÂ∏ÇÂú∫‰ª∑Ê†ºAPI PythonÂÆ¢Êà∑Á´ØÁ§∫‰æã
"""

import requests
import json
from typing import Dict, List, Optional

class MarketPriceClient:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def health_check(self) -> Dict:
        """ÂÅ•Â∫∑Ê£ÄÊü•"""
        response = self.session.get(f"{self.base_url}/api/health")
        return response.json()
    
    def get_provinces(self) -> List[Dict]:
        """Ëé∑ÂèñÁúÅ‰ªΩÂàóË°®"""
        response = self.session.get(f"{self.base_url}/api/provinces")
        return response.json()
    
    def get_varieties(self, province: Optional[str] = None) -> List[str]:
        """Ëé∑ÂèñÂìÅÁßçÂàóË°®"""
        params = {"province": province} if province else {}
        response = self.session.get(f"{self.base_url}/api/varieties", params=params)
        return response.json()
    
    def query_prices(self, **filters) -> Dict:
        """Êü•ËØ¢‰ª∑Ê†ºÊï∞ÊçÆ"""
        response = self.session.post(f"{self.base_url}/api/prices/query", json=filters)
        return response.json()
    
    def get_nearby_prices(self, lat: float, lon: float, radius: int = 50) -> Dict:
        """Ëé∑ÂèñÈôÑËøëÂ∏ÇÂú∫‰ª∑Ê†º"""
        data = {"latitude": lat, "longitude": lon, "radius": radius}
        response = self.session.post(f"{self.base_url}/api/prices/nearby", json=data)
        return response.json()

def main():
    # ÂàõÂª∫ÂÆ¢Êà∑Á´Ø
    client = MarketPriceClient()
    
    # ÂÅ•Â∫∑Ê£ÄÊü•
    health = client.health_check()
    print(f"ÊúçÂä°Áä∂ÊÄÅ: {health['status']}")
    
    # Ëé∑ÂèñÁúÅ‰ªΩÂàóË°®
    provinces = client.get_provinces()
    print(f"ÊîØÊåÅÁúÅ‰ªΩÊï∞Èáè: {len(provinces['data'])}")
    
    # Êü•ËØ¢Âπø‰∏úÁúÅÁôΩËêùÂçú‰ª∑Ê†º
    prices = client.query_prices(
        province="Âπø‰∏úÁúÅ",
        variety_name="ÁôΩËêùÂçú",
        limit=10
    )
    print(f"ÊâæÂà∞‰ª∑Ê†ºËÆ∞ÂΩï: {prices['count']} Êù°")
    
    # Ëé∑ÂèñÂπøÂ∑ûÈôÑËøëÁöÑÂ∏ÇÂú∫‰ª∑Ê†º
    nearby = client.get_nearby_prices(23.1291, 113.2644, 100)
    print(f"ÈôÑËøëÂ∏ÇÂú∫Êï∞Èáè: {nearby['count']}")

if __name__ == "__main__":
    main()
EOF

    # JavaScriptÂÆ¢Êà∑Á´ØÁ§∫‰æã
    cat > "$target_dir/examples/javascript_client.js" << 'EOF'
/**
 * ÂÜú‰∫ßÂìÅÂ∏ÇÂú∫‰ª∑Ê†ºAPI JavaScriptÂÆ¢Êà∑Á´ØÁ§∫‰æã
 */

class MarketPriceAPI {
    constructor(baseURL = 'http://localhost:8000') {
        this.baseURL = baseURL;
    }
    
    async request(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        const response = await fetch(url, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        return await response.json();
    }
    
    async healthCheck() {
        return await this.request('/api/health');
    }
    
    async getProvinces() {
        return await this.request('/api/provinces');
    }
    
    async getVarieties(province = null) {
        const params = province ? `?province=${encodeURIComponent(province)}` : '';
        return await this.request(`/api/varieties${params}`);
    }
    
    async queryPrices(filters) {
        return await this.request('/api/prices/query', {
            method: 'POST',
            body: JSON.stringify(filters)
        });
    }
    
    async getNearbyPrices(lat, lon, radius = 50) {
        return await this.request('/api/prices/nearby', {
            method: 'POST',
            body: JSON.stringify({
                latitude: lat,
                longitude: lon,
                radius: radius
            })
        });
    }
}

// ‰ΩøÁî®Á§∫‰æã
async function main() {
    const api = new MarketPriceAPI();
    
    try {
        // ÂÅ•Â∫∑Ê£ÄÊü•
        const health = await api.healthCheck();
        console.log('ÊúçÂä°Áä∂ÊÄÅ:', health.status);
        
        // Ëé∑ÂèñÁúÅ‰ªΩÂàóË°®
        const provinces = await api.getProvinces();
        console.log('ÊîØÊåÅÁúÅ‰ªΩÊï∞Èáè:', provinces.data.length);
        
        // Êü•ËØ¢‰ª∑Ê†ºÊï∞ÊçÆ
        const prices = await api.queryPrices({
            province: 'Âπø‰∏úÁúÅ',
            variety_name: 'ÁôΩËêùÂçú',
            limit: 10
        });
        console.log('ÊâæÂà∞‰ª∑Ê†ºËÆ∞ÂΩï:', prices.count, 'Êù°');
        
        // Ëé∑ÂèñÁî®Êà∑‰ΩçÁΩÆÈôÑËøëÁöÑ‰ª∑Ê†ºÔºàÈúÄË¶ÅÁî®Êà∑ÊéàÊùÉÔºâ
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(async (position) => {
                const { latitude, longitude } = position.coords;
                const nearby = await api.getNearbyPrices(latitude, longitude, 100);
                console.log('ÈôÑËøëÂ∏ÇÂú∫Êï∞Èáè:', nearby.count);
            });
        }
        
    } catch (error) {
        console.error('APIË∞ÉÁî®Â§±Ë¥•:', error);
    }
}

// Âú®ÊµèËßàÂô®ÁéØÂ¢É‰∏≠ËøêË°å
if (typeof window !== 'undefined') {
    main();
}

// Âú®Node.jsÁéØÂ¢É‰∏≠ÂØºÂá∫
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MarketPriceAPI;
}
EOF

    log_info "Á§∫‰æãÊñá‰ª∂ÂàõÂª∫ÂÆåÊàê"
}

# ÂàõÂª∫ÁâàÊú¨‰ø°ÊÅØÊñá‰ª∂
create_version_file() {
    log_step "ÂàõÂª∫ÁâàÊú¨‰ø°ÊÅØÊñá‰ª∂..."
    
    local target_dir="$BUILD_DIR/$PACKAGE_NAME"
    
    cat > "$target_dir/VERSION" << EOF
ÂÜú‰∫ßÂìÅÂ∏ÇÂú∫‰ª∑Ê†ºÁõëÊéßÁ≥ªÁªü
ÁâàÊú¨: $PLUGIN_VERSION
ÊûÑÂª∫Êó∂Èó¥: $(date '+%Y-%m-%d %H:%M:%S')
ÊûÑÂª∫ÁéØÂ¢É: $(uname -a)
GitÊèê‰∫§: $(git rev-parse --short HEAD 2>/dev/null || echo "unknown")

Á≥ªÁªüË¶ÅÊ±Ç:
- Ubuntu 22.04 LTS
- Python 3.11
- 8Ê†∏CPU + 32GBÂÜÖÂ≠ò
- ModelScope Library

ÂäüËÉΩÁâπÊÄß:
- ÂÆûÊó∂Êï∞ÊçÆÁà¨Âèñ
- RESTful APIÊé•Âè£
- Âú∞ÁêÜ‰ΩçÁΩÆÊúçÂä°
- ‰ª∑Ê†ºË∂ãÂäøÂàÜÊûê
- DockerÂÆπÂô®ÂåñÈÉ®ÁΩ≤
- ÁõëÊéßÂíåÂëäË≠¶

‰ΩúËÄÖ: xiaohai
ËÆ∏ÂèØËØÅ: MIT
EOF

    log_info "ÁâàÊú¨‰ø°ÊÅØÊñá‰ª∂ÂàõÂª∫ÂÆåÊàê"
}

# ÂàõÂª∫ËÆ∏ÂèØËØÅÊñá‰ª∂
create_license_file() {
    log_step "ÂàõÂª∫ËÆ∏ÂèØËØÅÊñá‰ª∂..."
    
    local target_dir="$BUILD_DIR/$PACKAGE_NAME"
    
    cat > "$target_dir/LICENSE" << 'EOF'
MIT License

Copyright (c) 2024 ÂÜú‰∫ßÂìÅÂ∏ÇÂú∫‰ª∑Ê†ºÁõëÊéßÁ≥ªÁªü

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

    log_info "ËÆ∏ÂèØËØÅÊñá‰ª∂ÂàõÂª∫ÂÆåÊàê"
}

# ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑ
create_directory_structure() {
    log_step "ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑ..."
    
    local target_dir="$BUILD_DIR/$PACKAGE_NAME"
    
    # ÂàõÂª∫ÂøÖË¶ÅÁöÑÁõÆÂΩï
    mkdir -p "$target_dir"/{data,logs,reports,backups,ssl,grafana/provisioning}
    
    # ÂàõÂª∫Á©∫ÁöÑ.gitkeepÊñá‰ª∂
    touch "$target_dir/data/.gitkeep"
    touch "$target_dir/logs/.gitkeep"
    touch "$target_dir/reports/.gitkeep"
    touch "$target_dir/backups/.gitkeep"
    
    log_info "ÁõÆÂΩïÁªìÊûÑÂàõÂª∫ÂÆåÊàê"
}

# È™åËØÅÊâìÂåÖÂÜÖÂÆπ
verify_package() {
    log_step "È™åËØÅÊâìÂåÖÂÜÖÂÆπ..."
    
    local target_dir="$BUILD_DIR/$PACKAGE_NAME"
    local required_files=(
        "market_crawler.py"
        "api_server.py"
        "database_manager.py"
        "location_service.py"
        "scheduler_service.py"
        "requirements.txt"
        "deploy.sh"
        "README.md"
        "plugin_info.json"
    )
    
    local missing_files=()
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$target_dir/$file" ]]; then
            missing_files+=("$file")
        fi
    done
    
    if [[ ${#missing_files[@]} -gt 0 ]]; then
        log_error "Áº∫Â∞ëÂøÖË¶ÅÊñá‰ª∂: ${missing_files[*]}"
        exit 1
    fi
    
    log_success "ÊâìÂåÖÂÜÖÂÆπÈ™åËØÅÈÄöËøá"
}

# ÂàõÂª∫ÂéãÁº©ÂåÖ
create_archive() {
    log_step "ÂàõÂª∫ÂéãÁº©ÂåÖ..."
    
    cd "$BUILD_DIR"
    
    # ÂàõÂª∫tar.gzÂéãÁº©ÂåÖ
    tar -czf "../$DIST_DIR/${PACKAGE_NAME}.tar.gz" "$PACKAGE_NAME"
    
    # ÂàõÂª∫zipÂéãÁº©ÂåÖ
    zip -r "../$DIST_DIR/${PACKAGE_NAME}.zip" "$PACKAGE_NAME" > /dev/null
    
    cd ..
    
    # ËÆ°ÁÆóÊñá‰ª∂Â§ßÂ∞èÂíåÊ†°È™åÂíå
    local tar_size=$(du -h "$DIST_DIR/${PACKAGE_NAME}.tar.gz" | cut -f1)
    local zip_size=$(du -h "$DIST_DIR/${PACKAGE_NAME}.zip" | cut -f1)
    local tar_md5=$(md5sum "$DIST_DIR/${PACKAGE_NAME}.tar.gz" | cut -d' ' -f1)
    local zip_md5=$(md5sum "$DIST_DIR/${PACKAGE_NAME}.zip" | cut -d' ' -f1)
    
    # ÂàõÂª∫Ê†°È™åÂíåÊñá‰ª∂
    cat > "$DIST_DIR/checksums.txt" << EOF
# ÂÜú‰∫ßÂìÅÂ∏ÇÂú∫‰ª∑Ê†ºÁõëÊéßÁ≥ªÁªü v$PLUGIN_VERSION Ê†°È™åÂíå
# ÁîüÊàêÊó∂Èó¥: $(date '+%Y-%m-%d %H:%M:%S')

${PACKAGE_NAME}.tar.gz  $tar_md5  $tar_size
${PACKAGE_NAME}.zip     $zip_md5  $zip_size
EOF
    
    log_success "ÂéãÁº©ÂåÖÂàõÂª∫ÂÆåÊàê"
    log_info "tar.gz: $tar_size (MD5: $tar_md5)"
    log_info "zip: $zip_size (MD5: $zip_md5)"
}

# ÊòæÁ§∫ÂÆåÊàê‰ø°ÊÅØ
show_completion_info() {
    echo
    log_success "üéâ Êèí‰ª∂ÊâìÂåÖÂÆåÊàêÔºÅ"
    echo
    echo -e "${PURPLE}=== ÊâìÂåÖÁªìÊûú ===${NC}"
    echo "üì¶ ÂéãÁº©ÂåÖ‰ΩçÁΩÆ: $DIST_DIR/"
    echo "   ‚Ä¢ ${PACKAGE_NAME}.tar.gz"
    echo "   ‚Ä¢ ${PACKAGE_NAME}.zip"
    echo "   ‚Ä¢ checksums.txt"
    echo
    echo -e "${PURPLE}=== ÈÉ®ÁΩ≤ËØ¥Êòé ===${NC}"
    echo "1. ‰∏ä‰º†ÂéãÁº©ÂåÖÂà∞ÁõÆÊ†áÊúçÂä°Âô®"
    echo "2. Ëß£ÂéãÁº©ÂåÖ: tar -xzf ${PACKAGE_NAME}.tar.gz"
    echo "3. ËøõÂÖ•ÁõÆÂΩï: cd $PACKAGE_NAME"
    echo "4. ËøêË°åÈÉ®ÁΩ≤: chmod +x deploy.sh && ./deploy.sh"
    echo
    echo -e "${PURPLE}=== Êñá‰ª∂Ê∏ÖÂçï ===${NC}"
    echo "Ê†∏ÂøÉÊñá‰ª∂:"
    echo "  ‚Ä¢ PythonÂ∫îÁî®Á®ãÂ∫è (*.py)"
    echo "  ‚Ä¢ ‰æùËµñÈÖçÁΩÆ (requirements.txt)"
    echo "  ‚Ä¢ DockerÈÖçÁΩÆ (Dockerfile, docker-compose.yml)"
    echo
    echo "ÈÉ®ÁΩ≤ËÑöÊú¨:"
    echo "  ‚Ä¢ deploy.sh - ‰∏ÄÈîÆÈÉ®ÁΩ≤ËÑöÊú¨"
    echo "  ‚Ä¢ install.sh - Êú¨Âú∞ÂÆâË£ÖËÑöÊú¨"
    echo "  ‚Ä¢ docker-install.sh - DockerÂÆâË£ÖËÑöÊú¨"
    echo
    echo "ÈÖçÁΩÆÊñá‰ª∂:"
    echo "  ‚Ä¢ plugin_config.yaml - ‰∏ªÈÖçÁΩÆÊñá‰ª∂"
    echo "  ‚Ä¢ .env.example - ÁéØÂ¢ÉÂèòÈáèÊ®°Êùø"
    echo "  ‚Ä¢ plugin_info.json - Êèí‰ª∂‰ø°ÊÅØ"
    echo
    echo "ÊñáÊ°£Êñá‰ª∂:"
    echo "  ‚Ä¢ README.md - ‰∏ªË¶ÅÊñáÊ°£"
    echo "  ‚Ä¢ docs/ - ËØ¶ÁªÜÊñáÊ°£ÁõÆÂΩï"
    echo "  ‚Ä¢ examples/ - ‰ΩøÁî®Á§∫‰æã"
    echo
    echo -e "${GREEN}ÊâìÂåÖÁõÆÂΩï: $BUILD_DIR/$PACKAGE_NAME${NC}"
    echo -e "${GREEN}ÂàÜÂèëÁõÆÂΩï: $DIST_DIR/${NC}"
}

# ‰∏ªÂáΩÊï∞
main() {
    show_package_info
    
    read -p "ÊåâÂõûËΩ¶ÈîÆÂºÄÂßãÊâìÂåÖ..." -r
    
    clean_build_dir
    copy_core_files
    copy_config_files
    copy_deployment_scripts
    copy_documentation
    create_examples
    create_version_file
    create_license_file
    create_directory_structure
    verify_package
    create_archive
    show_completion_info
}

# ËøêË°å‰∏ªÁ®ãÂ∫è
main "$@"
